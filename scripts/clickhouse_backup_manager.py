#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—ç–∫–∞–ø–∞–º–∏ ClickHouse —á–µ—Ä–µ–∑ clickhouse-backup
"""

import subprocess
import argparse
import sys
from datetime import datetime
import os
from dotenv import load_dotenv

# Load environment variables
dotenv_path = os.path.join(os.path.dirname(__file__), '../infra/env/clickhouse.env')
load_dotenv(dotenv_path=dotenv_path)

class ClickHouseBackupManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—ç–∫–∞–ø–∞–º–∏ ClickHouse
    """
    
    def _run_command(self, cmd, description="Command"):
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        
        Args:
            cmd (str): –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            description (str): –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            subprocess.CompletedProcess: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            
        Raises:
            Exception: –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π
        """
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        
        if result.returncode != 0:
            error_msg = result.stderr.strip() if result.stderr.strip() else result.stdout.strip()
            if not error_msg:
                error_msg = f"Command failed with return code {result.returncode}"
            
            print(f"‚ùå –û—à–∏–±–∫–∞ {description}: {error_msg}")
            print(f"üìã –ö–æ–º–∞–Ω–¥–∞: {cmd}")
            print(f"üìã Return code: {result.returncode}")
            print(f"üìã Stdout: {result.stdout}")
            print(f"üìã Stderr: {result.stderr}")
            raise Exception(f"–û—à–∏–±–∫–∞ {description}: {error_msg}")
            
        return result
    
    def __init__(self):
        self.super_user = os.getenv("CH_USER", "default")
        self.super_password = os.getenv("CH_PASSWORD", "")
    
    def create_backup(self, backup_name=None):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ ClickHouse
        
        Args:
            backup_name (str): –ò–º—è –±—ç–∫–∞–ø–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        
        Returns:
            str: –ò–º—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞
        """
        if not backup_name:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_name = f"backup_local_{timestamp}"
        
        print(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞: {backup_name}")
        
        cmd = f"docker exec clickhouse-backup clickhouse-backup create_remote '{backup_name}'"
        result = self._run_command(cmd, "—Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞")
        
        print(f"‚úÖ –ë—ç–∫–∞–ø {backup_name} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"üìã –í—ã–≤–æ–¥: {result.stdout}")
        return backup_name
    
    def list_backups(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤
        
        Returns:
            str: –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤
        """
        print("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤...")
        
        cmd = "docker exec clickhouse-backup clickhouse-backup list remote"
        result = self._run_command(cmd, "–ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤")
        
        print("‚úÖ –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤:")
        print(result.stdout)
        return result.stdout
    
    def get_latest_backup(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞
        
        Returns:
            str: –ò–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞
        """
        cmd = "docker exec clickhouse-backup clickhouse-backup list remote | grep '^backup' | tail -1 | awk '{print $1}'"
        result = self._run_command(cmd, "–ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞")
        
        if result.stdout.strip():
            backup_name = result.stdout.strip()
            print(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø: {backup_name}")
            return backup_name
        else:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã")
    
    def get_backup_info(self, backup_name):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—ç–∫–∞–ø–µ
        
        Args:
            backup_name (str): –ò–º—è –±—ç–∫–∞–ø–∞
        
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—ç–∫–∞–ø–µ
        """
        cmd = f"docker exec clickhouse-backup clickhouse-backup list remote | grep '{backup_name}'"
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        
        if result.returncode == 0 and backup_name in result.stdout:
            # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—ç–∫–∞–ø–µ
            lines = result.stdout.strip().split('\n')
            for line in lines:
                if backup_name in line:
                    parts = line.split()
                    if len(parts) >= 3:
                        return {
                            'name': parts[0],
                            'size': parts[1],
                            'created': parts[2] + ' ' + parts[3] if len(parts) > 3 else parts[2]
                        }
        return None

    def get_current_tables_info(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö –≤ ClickHouse
        
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
        """
        cmd = "docker exec clickhouse-01 clickhouse-client --query \"SELECT database, name, engine, total_rows, total_bytes FROM system.tables WHERE database NOT IN ('system', 'information_schema') ORDER BY database, name\""
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        
        tables_info = {}
        if result.returncode == 0:
            lines = result.stdout.strip().split('\n')
            if lines and lines[0].strip():
                for line in lines:
                    if line.strip():
                        parts = line.split('\t')
                        if len(parts) >= 5:
                            db_table = f"{parts[0]}.{parts[1]}"
                            tables_info[db_table] = {
                                'engine': parts[2],
                                'total_rows': parts[3],
                                'total_bytes': parts[4]
                            }
        return tables_info

    def compare_with_backup(self, backup_name):
        """
        –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –±—ç–∫–∞–ø–æ–º
        
        Args:
            backup_name (str): –ò–º—è –±—ç–∫–∞–ø–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        """
        print(f"üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –±—ç–∫–∞–ø–æ–º: {backup_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—ç–∫–∞–ø–µ
        backup_info = self.get_backup_info(backup_name)
        if not backup_info:
            return {'needs_restore': True, 'reason': 'Backup not found'}
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        current_tables = self.get_current_tables_info()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ –±—ç–∫–∞–ø–µ
        cmd = f"docker exec clickhouse-backup clickhouse-backup list remote | grep '{backup_name}'"
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        
        if result.returncode != 0:
            return {'needs_restore': True, 'reason': 'Cannot access backup'}
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –±—ç–∫–∞–ø —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä > 0, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if backup_info['size'] == '0B' or backup_info['size'] == '0':
            return {'needs_restore': False, 'reason': 'Backup is empty'}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º–µ
        if not current_tables:
            return {'needs_restore': True, 'reason': 'No tables in current system'}
        
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –µ—Å–ª–∏ –±—ç–∫–∞–ø —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π, —Ç–æ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        return {'needs_restore': True, 'reason': 'Backup contains data that may differ from current state'}

    def restore_backup(self, backup_name=None, force=False):
        """
        –£–º–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞
        
        Args:
            backup_name (str): –ò–º—è –±—ç–∫–∞–ø–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π)
            force (bool): –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        Returns:
            str: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        if not backup_name:
            backup_name = self.get_latest_backup()
        
        print(f"üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –∏–∑ –±—ç–∫–∞–ø–∞: {backup_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        if not force:
            comparison = self.compare_with_backup(backup_name)
            if not comparison['needs_restore']:
                print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è: {comparison['reason']}")
                return f"Skipped restore from {backup_name}: {comparison['reason']}"
            else:
                print(f"üìã –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ: {comparison['reason']}")
        
        print(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±—ç–∫–∞–ø–∞: {backup_name}")
        
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        print("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º...")
        cleanup_cmd = f"docker exec clickhouse-backup clickhouse-backup restore_remote --schema --rm {backup_name}"
        cleanup_result = subprocess.run(cleanup_cmd, shell=True, capture_output=True, text=True)
        
        # –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        cmd = f"docker exec clickhouse-backup clickhouse-backup restore_remote {backup_name}"
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å –±–æ–ª–µ–µ —Ç–µ—Ä–ø–∏–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π stderr
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ return code, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º stderr –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        if result.returncode != 0:
            error_msg = result.stderr.strip() if result.stderr.strip() else result.stdout.strip()
            if not error_msg:
                error_msg = f"Command failed with return code {result.returncode}"
            
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±—ç–∫–∞–ø–∞: {error_msg}")
            print(f"üìã –ö–æ–º–∞–Ω–¥–∞: {cmd}")
            print(f"üìã Return code: {result.returncode}")
            print(f"üìã Stdout: {result.stdout}")
            print(f"üìã Stderr: {result.stderr}")
            raise Exception(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±—ç–∫–∞–ø–∞: {error_msg}")
        
        print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞ {backup_name} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        print(f"üìã –í—ã–≤–æ–¥: {result.stdout}")
        if result.stderr:
            print(f"üìã Stderr (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è): {result.stderr}")
        
        return f"Restored from {backup_name}"
    
    def verify_backup(self, backup_name):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±—ç–∫–∞–ø–∞
        
        Args:
            backup_name (str): –ò–º—è –±—ç–∫–∞–ø–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        Returns:
            bool: True –µ—Å–ª–∏ –±—ç–∫–∞–ø –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
        """
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±—ç–∫–∞–ø–∞: {backup_name}")
        
        cmd = f"docker exec clickhouse-backup clickhouse-backup list remote | grep '{backup_name}'"
        try:
            result = self._run_command(cmd, "–ø—Ä–æ–≤–µ—Ä–∫–∏ –±—ç–∫–∞–ø–∞")
            if backup_name in result.stdout:
                print(f"‚úÖ –ë—ç–∫–∞–ø {backup_name} –Ω–∞–π–¥–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
                return True
            else:
                print(f"‚ùå –ë—ç–∫–∞–ø {backup_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
        except Exception:
            print(f"‚ùå –ë—ç–∫–∞–ø {backup_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
    
    def delete_backup(self, backup_name):
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞
        
        Args:
            backup_name (str): –ò–º—è –±—ç–∫–∞–ø–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        
        Returns:
            bool: True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞: {backup_name}")
        
        cmd = f"docker exec clickhouse-backup clickhouse-backup delete remote {backup_name}"
        try:
            result = self._run_command(cmd, "—É–¥–∞–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–∞")
            print(f"‚úÖ –ë—ç–∫–∞–ø {backup_name} —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–∞ {backup_name}: {e}")
            return False
    
    def cleanup_old_backups(self, keep_count=7):
        """
        –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤
        
        Args:
            keep_count (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ç–∫–∞–ø–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        
        Returns:
            str: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏
        """
        print(f"üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º {keep_count})...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—ç–∫–∞–ø–æ–≤
        cmd = "docker exec clickhouse-backup clickhouse-backup list remote | grep '^backup' | awk '{print $1}' | sort"
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        
        if result.returncode == 0:
            backups = result.stdout.strip().split('\n')
            backups = [b.strip() for b in backups if b.strip()]
            
            if len(backups) > keep_count:
                # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ keep_count –±—ç–∫–∞–ø–æ–≤
                backups_to_delete = backups[:-keep_count]
                
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ {len(backups_to_delete)} —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤...")
                
                deleted_count = 0
                for backup in backups_to_delete:
                    if self.delete_backup(backup):
                        deleted_count += 1
                
                print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ {deleted_count} –±—ç–∫–∞–ø–æ–≤, –æ—Å—Ç–∞–≤–ª–µ–Ω–æ {len(backups) - deleted_count}")
                return f"Cleaned up, deleted {deleted_count}, kept {len(backups) - deleted_count}"
            else:
                print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ç–∫–∞–ø–æ–≤ ({len(backups)}) –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã, –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                return f"No cleanup needed, {len(backups)} backups"
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏: {result.stderr}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤: {result.stderr}")
    
    def test_clickhouse_connection(self):
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ClickHouse
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ClickHouse...")
        
        try:
            cmd = f"docker exec -i clickhouse-01 clickhouse-client --user {self.super_user} --password {self.super_password} --query 'SELECT 1'"
            result = self._run_command(cmd, "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ClickHouse")
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ClickHouse: {e}")
            return False
    
    def simulate_failure_and_restore(self, table_name="test_db.sample_table"):
        """
        –ò–º–∏—Ç–∞—Ü–∏—è —Å–±–æ—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        
        Args:
            table_name (str): –ò–º—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Returns:
            str: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        print(f"üß™ –ò–º–∏—Ç–∞—Ü–∏—è —Å–±–æ—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table_name}...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
            backup_name = self.create_backup()
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–±–æ–π - —É–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã {table_name}...")
            drop_cmd = f"docker exec -i clickhouse-01 clickhouse-client --user {self.super_user} --password {self.super_password} --query 'DROP TABLE IF EXISTS {table_name} ON CLUSTER dwh_test SYNC;'"
            
            try:
                self._run_command(drop_cmd, "—É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞
            self.restore_backup(backup_name)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            check_cmd = f"docker exec -i clickhouse-01 clickhouse-client --user {self.super_user} --password {self.super_password} --query 'SELECT count() FROM {table_name};'"
            result = self._run_command(check_cmd, "–ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            
            print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {result.stdout.strip()}")
            return "Test passed"
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return f"Test failed: {e}"

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—ç–∫–∞–ø–∞–º–∏"""
    parser = argparse.ArgumentParser(description="–ú–µ–Ω–µ–¥–∂–µ—Ä –±—ç–∫–∞–ø–æ–≤ ClickHouse")
    parser.add_argument("action", choices=[
        "create", "list", "restore", "delete", "cleanup", "verify", "test", "health"
    ], help="–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    parser.add_argument("--backup-name", help="–ò–º—è –±—ç–∫–∞–ø–∞")
    parser.add_argument("--keep-count", type=int, default=7, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ç–∫–∞–ø–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ")
    parser.add_argument("--table-name", default="test_db.sample_table", help="–ò–º—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    args = parser.parse_args()
    
    manager = ClickHouseBackupManager()
    
    try:
        if args.action == "create":
            backup_name = manager.create_backup(args.backup_name)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_name}")
            
        elif args.action == "list":
            backups = manager.list_backups()
            print("‚úÖ –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤ –ø–æ–ª—É—á–µ–Ω")
            
        elif args.action == "restore":
            result = manager.restore_backup(args.backup_name)
            print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: {result}")
            
        elif args.action == "delete":
            if not args.backup_name:
                print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –±—ç–∫–∞–ø–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                sys.exit(1)
            success = manager.delete_backup(args.backup_name)
            if success:
                print(f"‚úÖ –ë—ç–∫–∞–ø {args.backup_name} —É–¥–∞–ª–µ–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–∞ {args.backup_name}")
                sys.exit(1)
                
        elif args.action == "cleanup":
            result = manager.cleanup_old_backups(args.keep_count)
            print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞: {result}")
            
        elif args.action == "verify":
            if not args.backup_name:
                print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –±—ç–∫–∞–ø–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                sys.exit(1)
            success = manager.verify_backup(args.backup_name)
            if success:
                print(f"‚úÖ –ë—ç–∫–∞–ø {args.backup_name} –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            else:
                print(f"‚ùå –ë—ç–∫–∞–ø {args.backup_name} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
                sys.exit(1)
                
        elif args.action == "test":
            result = manager.simulate_failure_and_restore(args.table_name)
            print(f"‚úÖ –¢–µ—Å—Ç: {result}")
            
        elif args.action == "health":
            success = manager.test_clickhouse_connection()
            if success:
                print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –±—ç–∫–∞–ø–æ–≤ –∑–¥–æ—Ä–æ–≤–∞")
            else:
                print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –±—ç–∫–∞–ø–æ–≤")
                sys.exit(1)
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
