#!/usr/bin/env python3
"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Nord Pool API
"""

import requests
import json
import time
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv

# Load environment variables
dotenv_path = os.path.join(os.path.dirname(__file__), '../infra/env/kafka.env')
load_dotenv(dotenv_path=dotenv_path)

class NordPoolAPIClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Nord Pool API
    """
    
    def __init__(self):
        self.base_url = "https://api.nordpoolgroup.com"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'EnergyHub/1.0',
            'Accept': 'application/json'
        })
    
    def get_intraday_prices(self, area: str = "FI", date: str = None):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏–¥–Ω–µ–≤–Ω—ã—Ö —Ü–µ–Ω
        
        Args:
            area (str): –¢–æ—Ä–≥–æ–≤–∞—è –∑–æ–Ω–∞ (FI, SE, NO, DK, etc.)
            date (str): –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        
        Returns:
            dict: –î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö
        """
        if not date:
            date = datetime.now().strftime("%Y-%m-%d")
        
        url = f"{self.base_url}/v1/intraday/prices"
        params = {
            'area': area,
            'date': date
        }
        
        try:
            response = self.session.get(url, params=params, timeout=30)
            response.raise_for_status()
            
            data = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –¥–ª—è –∑–æ–Ω—ã {area} –Ω–∞ {date}")
            return data
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Nord Pool API: {e}")
            return None
    
    def get_day_ahead_prices(self, area: str = "FI", date: str = None):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã—Ö —Ü–µ–Ω
        
        Args:
            area (str): –¢–æ—Ä–≥–æ–≤–∞—è –∑–æ–Ω–∞
            date (str): –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        
        Returns:
            dict: –î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö
        """
        if not date:
            date = datetime.now().strftime("%Y-%m-%d")
        
        url = f"{self.base_url}/v1/dayahead/prices"
        params = {
            'area': area,
            'date': date
        }
        
        try:
            response = self.session.get(url, params=params, timeout=30)
            response.raise_for_status()
            
            data = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–Ω–µ–≤–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –∑–æ–Ω—ã {area} –Ω–∞ {date}")
            return data
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–Ω–µ–≤–Ω—ã—Ö —Ü–µ–Ω: {e}")
            return None
    
    def get_volume_data(self, area: str = "FI", date: str = None):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±—ä–µ–º–∞—Ö —Ç–æ—Ä–≥–æ–≤
        
        Args:
            area (str): –¢–æ—Ä–≥–æ–≤–∞—è –∑–æ–Ω–∞
            date (str): –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        
        Returns:
            dict: –î–∞–Ω–Ω—ã–µ –æ–± –æ–±—ä–µ–º–∞—Ö
        """
        if not date:
            date = datetime.now().strftime("%Y-%m-%d")
        
        url = f"{self.base_url}/v1/volumes"
        params = {
            'area': area,
            'date': date
        }
        
        try:
            response = self.session.get(url, params=params, timeout=30)
            response.raise_for_status()
            
            data = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—ä–µ–º–∞—Ö –¥–ª—è –∑–æ–Ω—ã {area} –Ω–∞ {date}")
            return data
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±—ä–µ–º–∞—Ö: {e}")
            return None
    
    def transform_to_market_data(self, api_data: dict, area: str):
        """
        –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö API –≤ —Ñ–æ—Ä–º–∞—Ç —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            api_data (dict): –î–∞–Ω–Ω—ã–µ –æ—Ç API
            area (str): –¢–æ—Ä–≥–æ–≤–∞—è –∑–æ–Ω–∞
        
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        """
        market_data = []
        
        if not api_data or 'data' not in api_data:
            return market_data
        
        try:
            for item in api_data['data']:
                market_record = {
                    "timestamp": datetime.utcnow().isoformat(),
                    "trading_zone": area,
                    "price_eur_mwh": float(item.get('price', 0)),
                    "volume_mwh": float(item.get('volume', 0)),
                    "source": "nordpool_api"
                }
                market_data.append(market_record)
            
            print(f"‚úÖ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(market_data)} –∑–∞–ø–∏—Å–µ–π —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return market_data

def generate_fallback_market_data():
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
    
    Returns:
        dict: –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    import random
    from datetime import datetime
    
    trading_zones = ["FI", "SE", "NO", "DK", "EE", "LV", "LT"]
    zone = random.choice(trading_zones)
    
    return {
        "timestamp": datetime.utcnow().isoformat(),
        "trading_zone": zone,
        "price_eur_mwh": round(random.uniform(25.0, 55.0), 2),
        "volume_mwh": round(random.uniform(100.0, 1000.0), 2),
        "source": "fallback_generator"
    }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∫–ª–∏–µ–Ω—Ç–∞"""
    client = NordPoolAPIClient()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Nord Pool API –∫–ª–∏–µ–Ω—Ç–∞...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–∏–¥–Ω–µ–≤–Ω—ã–µ —Ü–µ–Ω—ã
    intraday_data = client.get_intraday_prices("FI")
    if intraday_data:
        market_data = client.transform_to_market_data(intraday_data, "FI")
        print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(market_data)} –∑–∞–ø–∏—Å–µ–π –≤–Ω—É—Ç—Ä–∏–¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ —Ü–µ–Ω—ã
    day_ahead_data = client.get_day_ahead_prices("FI")
    if day_ahead_data:
        market_data = client.transform_to_market_data(day_ahead_data, "FI")
        print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(market_data)} –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    main()
