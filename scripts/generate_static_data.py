#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ ClickHouse
"""

import sys
import os
sys.path.append(os.path.dirname(__file__))

from clickhouse_utils import execute_sql_script

def generate_devices_data():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö"""
    sql_script = """
    INSERT INTO raw.devices_raw (device_id, device_name, device_type, location_id, manufacturer, model, installation_date, last_maintenance_date, status, raw_data)
    SELECT 
        number as device_id,
        '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ' || toString(number) as device_name,
        CASE 
            WHEN number % 3 = 0 THEN '–ì–≠–°'
            WHEN number % 3 = 1 THEN '–¢–≠–°'
            ELSE '–°–≠–°'
        END as device_type,
        (number % 10) + 1 as location_id,
        CASE 
            WHEN number % 3 = 0 THEN '–†–æ—Å—ç–Ω–µ—Ä–≥–æ–º–∞—à'
            WHEN number % 3 = 1 THEN '–°–∏–ª–æ–≤—ã–µ –º–∞—à–∏–Ω—ã'
            ELSE '–¢–†–¢'
        END as manufacturer,
        '–ú–æ–¥–µ–ª—å-' || toString(number) as model,
        addYears(toDate('2020-01-01'), number % 5) as installation_date,
        addDays(toDate('2024-01-01'), number % 30) as last_maintenance_date,
        'active' as status,
        '{}' as raw_data
    FROM numbers(1, 50);
    """
    
    result = execute_sql_script(sql_script)
    if result['success']:
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {result['result']} –∑–∞–ø–∏—Å–µ–π –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö: {result['error']}")
        raise Exception(result['error'])

def generate_locations_data():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ–∫–∞—Ü–∏—è—Ö"""
    sql_script = """
    INSERT INTO raw.locations_raw (location_id, location_name, region, city, address, latitude, longitude, timezone, country, raw_data)
    SELECT 
        number as location_id,
        '–†–µ–≥–∏–æ–Ω ' || toString(number) as location_name,
        CASE 
            WHEN number % 4 = 0 THEN '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π'
            WHEN number % 4 = 1 THEN '–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π'
            WHEN number % 4 = 2 THEN '–°–∏–±–∏—Ä—Å–∫–∏–π'
            ELSE '–î–∞–ª—å–Ω–µ–≤–æ—Å—Ç–æ—á–Ω—ã–π'
        END as region,
        '–ì–æ—Ä–æ–¥-' || toString(number) as city,
        '—É–ª. –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤, –¥. ' || toString(number) as address,
        round(rand() * 20 + 55, 4) as latitude,
        round(rand() * 40 + 30, 4) as longitude,
        'Europe/Moscow' as timezone,
        '–†–æ—Å—Å–∏—è' as country,
        '{}' as raw_data
    FROM numbers(1, 10);
    """
    
    result = execute_sql_script(sql_script)
    if result['success']:
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {result['result']} –∑–∞–ø–∏—Å–µ–π –æ –ª–æ–∫–∞—Ü–∏—è—Ö")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ–∫–∞—Ü–∏—è—Ö: {result['error']}")
        raise Exception(result['error'])

def generate_consumption_data():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏"""
    sql_script = """
    INSERT INTO raw.energy_consumption_raw (device_id, location_id, timestamp, energy_kwh, voltage, current_amp, power_factor, temperature, humidity, raw_data)
    SELECT 
        number as device_id,
        (number % 10) + 1 as location_id,
        addHours(now(), -number) as timestamp,
        round(rand() * 1000 + 500, 2) as energy_kwh,
        round(rand() * 50 + 220, 2) as voltage,
        round(rand() * 100 + 10, 2) as current_amp,
        round(rand() * 0.3 + 0.7, 3) as power_factor,
        round(rand() * 30 + 20, 1) as temperature,
        round(rand() * 20 + 40, 1) as humidity,
        '{}' as raw_data
    FROM numbers(1, 100);
    """
    
    result = execute_sql_script(sql_script)
    if result['success']:
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {result['result']} –∑–∞–ø–∏—Å–µ–π –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏: {result['error']}")
        raise Exception(result['error'])

def generate_weather_data():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ"""
    sql_script = """
    INSERT INTO raw.raw_weather (weather_id, location_id, timestamp, temperature_c, humidity_percent, wind_speed_mps, precipitation_mm)
    SELECT 
        'WEATHER_' || toString(number) as weather_id,
        (number % 10) + 1 as location_id,
        addHours(now(), -number) as timestamp,
        round(rand() * 40 - 20, 1) as temperature_c,
        round(rand() * 100, 1) as humidity_percent,
        round(rand() * 20, 1) as wind_speed_mps,
        round(rand() * 50, 1) as precipitation_mm
    FROM numbers(1, 200)
    WHERE NOT EXISTS (
        SELECT 1 FROM raw.raw_weather WHERE weather_id = 'WEATHER_' || toString(number)
    );
    """
    
    result = execute_sql_script(sql_script)
    if result['success']:
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {result['result']} –∑–∞–ø–∏—Å–µ–π –æ –ø–æ–≥–æ–¥–µ")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: {result['error']}")
        raise Exception(result['error'])

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üöÄ –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏)
        generate_locations_data()
        generate_devices_data()
        generate_consumption_data()
        generate_weather_data()
        
        print("‚úÖ –í—Å–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
