import clickhouse_connect
import os
from dotenv import load_dotenv

# Load environment variables
dotenv_path = os.path.join(os.path.dirname(__file__), '../infra/env/clickhouse.env')
load_dotenv(dotenv_path=dotenv_path)

class ClickHouseClient:
    """
    –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ClickHouse
    """
    def __init__(self):
        self.host = os.getenv("CLICKHOUSE_HOST", "localhost")
        self.port = int(os.getenv("CLICKHOUSE_PORT", "8123"))
        self.database = os.getenv("CLICKHOUSE_DATABASE", "energy_hub")
        self.username = os.getenv("CLICKHOUSE_USER", "default")
        self.password = os.getenv("CLICKHOUSE_PASSWORD", "")
        
        self.client = None
        self._connect()
    
    def _connect(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ClickHouse"""
        try:
            self.client = clickhouse_connect.get_client(
                host=self.host,
                port=self.port,
                database=self.database,
                username=self.username,
                password=self.password
            )
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse: {self.host}:{self.port}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ClickHouse: {e}")
            raise
    
    def execute_query(self, query: str, params: dict = None):
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            query (str): SQL –∑–∞–ø—Ä–æ—Å
            params (dict): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        """
        try:
            if params:
                result = self.client.query(query, parameters=params)
            else:
                result = self.client.query(query)
            
            return {
                'success': True,
                'data': result.result_rows if hasattr(result, 'result_rows') else [],
                'rowcount': result.row_count if hasattr(result, 'row_count') else 0
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def execute_command(self, command: str, params: dict = None):
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (INSERT, UPDATE, DELETE)
        
        Args:
            command (str): SQL –∫–æ–º–∞–Ω–¥–∞
            params (dict): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
        
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        """
        try:
            if params:
                result = self.client.command(command, parameters=params)
            else:
                result = self.client.command(command)
            
            return {
                'success': True,
                'result': result
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.client:
            self.client.close()
            print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ClickHouse –∑–∞–∫—Ä—ã—Ç–æ")

def execute_sql_script(sql_script: str, params: dict = None):
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL —Å–∫—Ä–∏–ø—Ç–∞
    
    Args:
        sql_script (str): SQL —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        params (dict): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    client = ClickHouseClient()
    try:
        if sql_script.strip().upper().startswith('SELECT'):
            result = client.execute_query(sql_script, params)
        else:
            result = client.execute_command(sql_script, params)
        return result
    finally:
        client.close()
