"""
DAG –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–µ–π –≤ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ dbt
"""

from datetime import datetime, timedelta
from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.operators.bash import BashOperator
from airflow.operators.empty import EmptyOperator
from airflow.utils.trigger_rule import TriggerRule
import os

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ DAG
default_args = {
    'owner': 'energy-hub',
    'depends_on_past': False,
    'start_date': datetime(2025, 1, 1),
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 2,
    'retry_delay': timedelta(minutes=5),
}

# –°–æ–∑–¥–∞–Ω–∏–µ DAG –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–µ–π
deduplication_dag = DAG(
    'deduplication_pipeline',
    default_args=default_args,
    description='–û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–µ–π –≤ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ dbt',
    schedule='*/5 * * * *',  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    catchup=False,
    tags=['deduplication', 'dbt', 'data-quality'],
)

def check_duplicates_before():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥—É–±–ª–µ–π –¥–æ –æ—á–∏—Å—Ç–∫–∏"""
    try:
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥—É–±–ª–µ–π –¥–æ –æ—á–∏—Å—Ç–∫–∏...")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å SQL –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –¥—É–±–ª–µ–π
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ clickhouse-client
        
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return "Success"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–µ–π: {e}")
        raise

def run_dbt_deduplication():
    """–ó–∞–ø—É—Å–∫ dbt –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–µ–π"""
    try:
        print("üßπ –ó–∞–ø—É—Å–∫ dbt –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–µ–π...")
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ dbt –º–æ–¥–µ–ª–µ–π –æ—á–∏—Å—Ç–∫–∏
        cmd = "cd /opt/dbt && dbt run --select tag:clean"
        
        print("‚úÖ –ú–æ–¥–µ–ª–∏ –æ—á–∏—Å—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        return "Success"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–µ–π: {e}")
        raise

def run_dbt_views():
    """–ó–∞–ø—É—Å–∫ dbt –º–æ–¥–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è view"""
    try:
        print("üëÅÔ∏è –ó–∞–ø—É—Å–∫ dbt –º–æ–¥–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è view...")
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ dbt view
        cmd = "cd /opt/dbt && dbt run --select tag:view"
        
        print("‚úÖ View —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
        return "Success"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ view: {e}")
        raise

def run_dbt_tests_dedup():
    """–ó–∞–ø—É—Å–∫ dbt —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–∏—Å—Ç–∫–∏"""
    try:
        print("üß™ –ó–∞–ø—É—Å–∫ dbt —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–∏—Å—Ç–∫–∏...")
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ dbt —Ç–µ—Å—Ç–æ–≤
        cmd = "cd /opt/dbt && dbt test --select test_no_duplicates"
        
        print("‚úÖ –¢–µ—Å—Ç—ã –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        return "Success"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: {e}")
        raise

def check_duplicates_after():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥—É–±–ª–µ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏"""
    try:
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥—É–±–ª–µ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏...")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å SQL –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –¥—É–±–ª–µ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–µ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return "Success"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–µ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {e}")
        raise

def update_dbt_sources():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ dbt sources –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∞–±–ª–∏—Ü –≤ ClickHouse"""
    try:
        print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ dbt sources –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∞–±–ª–∏—Ü –≤ ClickHouse...")
        
        import subprocess
        import yaml
        import os
        from typing import Dict, List, Any
        
        class DbtSourcesUpdater:
            def __init__(self):
                self.clickhouse_host = "clickhouse-01"
                self.clickhouse_port = 9000
                self.clickhouse_user = "principalwater"
                self.clickhouse_password = "UnixSpace@11."
                self.dbt_project_path = "/opt/airflow/dbt"
                self.sources_file = os.path.join(self.dbt_project_path, "models", "sources.yml")
                
            def get_clickhouse_tables(self) -> Dict[str, List[str]]:
                """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ ClickHouse –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
                query = """
                SELECT 
                    database,
                    name,
                    engine
                FROM system.tables 
                WHERE database IN ('raw', 'ods', 'dds', 'cdm')
                ORDER BY database, name
                """
                
                cmd = f"""docker exec {self.clickhouse_host} clickhouse-client \
                    --user {self.clickhouse_user} \
                    --password '{self.clickhouse_password}' \
                    --port {self.clickhouse_port} \
                    --query "{query}" \
                    --format TabSeparated"""
                
                try:
                    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
                    if result.returncode != 0:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {result.stderr}")
                        return {}
                    
                    tables_by_db = {}
                    for line in result.stdout.strip().split('\n'):
                        if line.strip():
                            parts = line.strip().split('\t')
                            if len(parts) >= 3:
                                database, table_name, engine = parts
                                if database not in tables_by_db:
                                    tables_by_db[database] = []
                                tables_by_db[database].append({
                                    'name': table_name,
                                    'engine': engine
                                })
                    
                    print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {sum(len(tables) for tables in tables_by_db.values())}")
                    return tables_by_db
                    
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
                    return {}
            
            def get_table_columns(self, database: str, table: str) -> List[Dict[str, Any]]:
                """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö —Ç–∞–±–ª–∏—Ü—ã"""
                query = f"""
                SELECT 
                    name,
                    type,
                    default_expression,
                    comment
                FROM system.columns 
                WHERE database = '{database}' AND table = '{table}'
                ORDER BY position
                """
                
                cmd = f"""docker exec {self.clickhouse_host} clickhouse-client \
                    --user {self.clickhouse_user} \
                    --password '{self.clickhouse_password}' \
                    --port {self.clickhouse_port} \
                    --query "{query}" \
                    --format TabSeparated"""
                
                try:
                    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
                    if result.returncode != 0:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è {database}.{table}: {result.stderr}")
                        return []
                    
                    columns = []
                    for line in result.stdout.strip().split('\n'):
                        if line.strip():
                            parts = line.strip().split('\t')
                            if len(parts) >= 4:
                                name, type_name, default_expr, comment = parts
                                columns.append({
                                    'name': name,
                                    'type': type_name,
                                    'default': default_expr if default_expr else None,
                                    'comment': comment if comment else None
                                })
                    
                    return columns
                    
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è {database}.{table}: {e}")
                    return []
            
            def load_existing_sources(self) -> Dict[str, Any]:
                """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π sources.yml"""
                if not os.path.exists(self.sources_file):
                    print("–§–∞–π–ª sources.yml –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
                    return {'version': 2, 'sources': []}
                
                try:
                    with open(self.sources_file, 'r', encoding='utf-8') as f:
                        return yaml.safe_load(f) or {'version': 2, 'sources': []}
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ sources.yml: {e}")
                    return {'version': 2, 'sources': []}
            
            def generate_column_tests(self, column_name: str, column_type: str) -> List[str]:
                """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –∏ —Ç–∏–ø–∞"""
                tests = []
                
                # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
                if 'id' in column_name.lower():
                    tests.extend(['not_null', 'unique'])
                elif column_name.lower() in ['timestamp', 'created_at', 'updated_at']:
                    tests.append('not_null')
                elif column_name.lower() in ['name', 'title', 'description']:
                    tests.append('not_null')
                elif 'amount' in column_name.lower() or 'price' in column_name.lower() or 'value' in column_name.lower():
                    tests.extend(['not_null', 'dbt_utils.accepted_range:min_value:0'])
                elif column_name.lower() in ['email']:
                    tests.extend(['not_null', 'dbt_utils.is_email'])
                elif column_name.lower() in ['url', 'link']:
                    tests.extend(['not_null', 'dbt_utils.is_url'])
                else:
                    tests.append('not_null')
                
                return tests
            
            def create_table_definition(self, table_name: str, columns: List[Dict[str, Any]]) -> Dict[str, Any]:
                """–°–æ–∑–¥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è sources.yml"""
                table_def = {
                    'name': table_name,
                    'description': f"Table {table_name} from ClickHouse",
                    'columns': []
                }
                
                for col in columns:
                    column_def = {
                        'name': col['name'],
                        'description': col.get('comment') or f"Column {col['name']} of type {col['type']}"
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã
                    tests = self.generate_column_tests(col['name'], col['type'])
                    if tests:
                        column_def['tests'] = tests
                    
                    table_def['columns'].append(column_def)
                
                return table_def
            
            def update_sources(self) -> bool:
                """–û–±–Ω–æ–≤–ª—è–µ—Ç sources.yml –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∞–±–ª–∏—Ü –≤ ClickHouse"""
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ ClickHouse
                    tables_by_db = self.get_clickhouse_tables()
                    if not tables_by_db:
                        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã –∏–∑ ClickHouse")
                        return False
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π sources.yml
                    sources_data = self.load_existing_sources()
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                    existing_sources = {}
                    for source in sources_data.get('sources', []):
                        existing_sources[source['name']] = {
                            'source': source,
                            'tables': {table['name']: table for table in source.get('tables', [])}
                        }
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                    updated = False
                    for database, tables in tables_by_db.items():
                        if database not in existing_sources:
                            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
                            print(f"–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {database}")
                            new_source = {
                                'name': database,
                                'description': f"Tables from {database} database",
                                'database': database,
                                'schema': database,
                                'tables': []
                            }
                            sources_data['sources'].append(new_source)
                            existing_sources[database] = {
                                'source': new_source,
                                'tables': {}
                            }
                            updated = True
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ
                        source_info = existing_sources[database]
                        for table_info in tables:
                            table_name = table_info['name']
                            
                            if table_name not in source_info['tables']:
                                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
                                print(f"–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É: {database}.{table_name}")
                                columns = self.get_table_columns(database, table_name)
                                table_def = self.create_table_definition(table_name, columns)
                                source_info['source']['tables'].append(table_def)
                                source_info['tables'][table_name] = table_def
                                updated = True
                    
                    if updated:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π sources.yml
                        with open(self.sources_file, 'w', encoding='utf-8') as f:
                            yaml.dump(sources_data, f, default_flow_style=False, allow_unicode=True, sort_keys=False)
                        print(f"–§–∞–π–ª sources.yml —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {self.sources_file}")
                    else:
                        print("–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, sources.yml –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω")
                    
                    return True
                    
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ sources.yml: {e}")
                    return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        updater = DbtSourcesUpdater()
        success = updater.update_sources()
        
        if success:
            print("‚úÖ Sources.yml —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
            return "Success"
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ sources.yml")
            raise Exception("Failed to update sources.yml")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
        raise

def generate_dedup_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–µ–π"""
    try:
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–µ–π...")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
        
        print("‚úÖ –û—Ç—á–µ—Ç –ø–æ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–µ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        return "Success"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        raise

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
start_task = EmptyOperator(
    task_id='start',
    dag=deduplication_dag,
)

update_sources_task = PythonOperator(
    task_id='update_dbt_sources',
    python_callable=update_dbt_sources,
    dag=deduplication_dag,
)

check_before_task = PythonOperator(
    task_id='check_duplicates_before',
    python_callable=check_duplicates_before,
    dag=deduplication_dag,
)

run_dedup_task = BashOperator(
    task_id='run_dbt_deduplication',
    bash_command='cd /opt/airflow/dbt && dbt run --select tag:clean',
    dag=deduplication_dag,
)

run_views_task = BashOperator(
    task_id='run_dbt_views',
    bash_command='cd /opt/airflow/dbt && dbt run --select tag:view',
    dag=deduplication_dag,
)

run_tests_task = BashOperator(
    task_id='run_dbt_tests_dedup',
    bash_command='cd /opt/airflow/dbt && dbt test --select test_no_duplicates',
    dag=deduplication_dag,
)

check_after_task = PythonOperator(
    task_id='check_duplicates_after',
    python_callable=check_duplicates_after,
    dag=deduplication_dag,
)

generate_report_task = PythonOperator(
    task_id='generate_dedup_report',
    python_callable=generate_dedup_report,
    dag=deduplication_dag,
)

end_task = EmptyOperator(
    task_id='end',
    dag=deduplication_dag,
    trigger_rule=TriggerRule.NONE_FAILED,
)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
start_task >> update_sources_task >> check_before_task >> run_dedup_task >> run_views_task >> run_tests_task >> check_after_task >> generate_report_task >> end_task
