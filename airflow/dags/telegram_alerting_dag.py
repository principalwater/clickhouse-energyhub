"""
–ü—Ä–æ–¥–∞–∫—à–Ω DAG –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–ª–µ—Ä—Ç–∏–Ω–≥–∞ –≤ Apache Airflow.

–≠—Ç–æ—Ç DAG –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç:
- –°–æ—Å—Ç–æ—è–Ω–∏–µ DAG'–æ–≤ (–ø–∞–¥–µ–Ω–∏—è, –æ—à–∏–±–∫–∏)
- –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (CPU, RAM, Docker)
- –°–æ—Å—Ç–æ—è–Ω–∏–µ ClickHouse –∫–ª–∞—Å—Ç–µ—Ä–∞
- –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç TelegramOperator 4.8.2+ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º API
"""

import os
import json
import psutil
import docker
from datetime import datetime, timedelta
from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.operators.empty import EmptyOperator
from airflow.operators.trigger_dagrun import TriggerDagRunOperator
from airflow.models import DagRun, TaskInstance
from airflow.utils.session import provide_session
from sqlalchemy.orm import Session

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ TelegramOperator
try:
    from airflow.providers.telegram.operators.telegram import TelegramOperator
    TELEGRAM_AVAILABLE = True
    print("‚úÖ TelegramOperator 4.8.2 –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError:
    TELEGRAM_AVAILABLE = False
    print("‚ùå TelegramOperator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install apache-airflow-providers-telegram>=4.8.2")


def get_dag_status_report(**context):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö DAG'–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å.
    """
    from airflow.models import DagRun, TaskInstance
    from airflow.utils.session import provide_session
    from sqlalchemy.orm import Session
    
    @provide_session
    def get_dag_runs(session: Session = None):
        # –ü–æ–ª—É—á–∞–µ–º DAG'–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        yesterday = datetime.now() - timedelta(days=1)
        
        dag_runs = session.query(DagRun).filter(
            DagRun.start_date >= yesterday
        ).all()
        
        report = {
            'total_dags': len(dag_runs),
            'success': 0,
            'failed': 0,
            'running': 0,
            'failed_dags': [],
            'running_dags': []
        }
        
        for dag_run in dag_runs:
            if dag_run.state == 'success':
                report['success'] += 1
            elif dag_run.state == 'failed':
                report['failed'] += 1
                report['failed_dags'].append({
                    'dag_id': dag_run.dag_id,
                    'start_date': dag_run.start_date.isoformat(),
                    'end_date': dag_run.end_date.isoformat() if dag_run.end_date else None,
                    'duration': str(dag_run.end_date - dag_run.start_date) if dag_run.end_date else 'N/A'
                })
            elif dag_run.state == 'running':
                report['running'] += 1
                report['running_dags'].append({
                    'dag_id': dag_run.dag_id,
                    'start_date': dag_run.start_date.isoformat(),
                    'duration': str(datetime.now() - dag_run.start_date)
                })
        
        return report
    
    report = get_dag_runs()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    message = f"""üìä **–û—Ç—á–µ—Ç –ø–æ DAG'–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞**

üî¢ **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ DAG'–æ–≤: {report['total_dags']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {report['success']} ‚úÖ
‚Ä¢ –° –æ—à–∏–±–∫–∞–º–∏: {report['failed']} ‚ùå
‚Ä¢ –í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è: {report['running']} üîÑ

"""
    
    if report['failed_dags']:
        message += "‚ùå **DAG'–∏ —Å –æ—à–∏–±–∫–∞–º–∏:**\n"
        for failed in report['failed_dags'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
            message += f"‚Ä¢ {failed['dag_id']} - {failed['start_date']}\n"
        if len(report['failed_dags']) > 5:
            message += f"‚Ä¢ ... –∏ –µ—â–µ {len(report['failed_dags']) - 5}\n"
    
    if report['running_dags']:
        message += "\nüîÑ **–í—ã–ø–æ–ª–Ω—è—é—â–∏–µ—Å—è DAG'–∏:**\n"
        for running in report['running_dags'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
            message += f"‚Ä¢ {running['dag_id']} - {running['duration']}\n"
        if len(report['running_dags']) > 3:
            message += f"‚Ä¢ ... –∏ –µ—â–µ {len(report['running_dags']) - 3}\n"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á–∞—Ö
    context['task_instance'].xcom_push(key='dag_report', value=report)
    context['task_instance'].xcom_push(key='dag_message', value=message)
    
    return message


def get_system_metrics(**context):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (CPU, RAM, Docker).
    """
    try:
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        # Docker –º–µ—Ç—Ä–∏–∫–∏
        docker_metrics = {}
        try:
            client = docker.from_env()
            containers = client.containers.list()
            
            total_cpu = 0
            total_memory = 0
            running_containers = 0
            
            for container in containers:
                try:
                    stats = container.stats(stream=False)
                    # CPU usage (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
                    cpu_delta = stats['cpu_stats']['cpu_usage']['total_usage'] - stats['precpu_stats']['cpu_usage']['total_usage']
                    system_delta = stats['cpu_stats']['system_cpu_usage'] - stats['precpu_stats']['system_cpu_usage']
                    if system_delta > 0:
                        cpu_percent_container = (cpu_delta / system_delta) * 100
                        total_cpu += cpu_percent_container
                    
                    # Memory usage (–≤ MB)
                    memory_usage = stats['memory_stats']['usage'] / (1024 * 1024)
                    total_memory += memory_usage
                    
                    running_containers += 1
                except:
                    continue
            
            docker_metrics = {
                'running_containers': running_containers,
                'avg_cpu_percent': total_cpu / running_containers if running_containers > 0 else 0,
                'total_memory_mb': total_memory,
                'avg_memory_mb': total_memory / running_containers if running_containers > 0 else 0
            }
        except Exception as e:
            docker_metrics = {'error': str(e)}
        
        metrics = {
            'timestamp': datetime.now().isoformat(),
            'system': {
                'cpu_percent': cpu_percent,
                'memory_percent': memory.percent,
                'memory_available_gb': round(memory.available / (1024**3), 2),
                'disk_percent': disk.percent,
                'disk_free_gb': round(disk.free / (1024**3), 2)
            },
            'docker': docker_metrics
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""üñ•Ô∏è **–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏**

üíª **CPU –∏ –ø–∞–º—è—Ç—å:**
‚Ä¢ CPU: {cpu_percent}%
‚Ä¢ RAM: {memory.percent}% ({memory.available_gb} GB —Å–≤–æ–±–æ–¥–Ω–æ)
‚Ä¢ –î–∏—Å–∫: {disk.percent}% ({disk.free_gb} GB —Å–≤–æ–±–æ–¥–Ω–æ)

üê≥ **Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:**
‚Ä¢ –ó–∞–ø—É—â–µ–Ω–æ: {docker_metrics.get('running_containers', 'N/A')}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π CPU: {round(docker_metrics.get('avg_cpu_percent', 0), 1)}%
‚Ä¢ –û–±—â–∞—è –ø–∞–º—è—Ç—å: {round(docker_metrics.get('total_memory_mb', 0), 1)} MB

‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}
"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context['task_instance'].xcom_push(key='system_metrics', value=metrics)
        context['task_instance'].xcom_push(key='system_message', value=message)
        
        return message
        
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {str(e)}"
        context['task_instance'].xcom_push(key='system_error', value=str(e))
        return error_message


def get_clickhouse_metrics(**context):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ ClickHouse –∫–ª–∞—Å—Ç–µ—Ä–∞.
    """
    import requests
    from clickhouse_connect import get_client
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        ch_host = os.environ.get('CLICKHOUSE_HOST', 'clickhouse-01')
        ch_port = os.environ.get('CLICKHOUSE_PORT', '8123')
        ch_user = os.environ.get('CLICKHOUSE_USER', 'default')
        ch_password = os.environ.get('CLICKHOUSE_PASSWORD', '')
        
        metrics = {}
        
        # HTTP API –º–µ—Ç—Ä–∏–∫–∏
        try:
            response = requests.get(
                f'http://{ch_host}:{ch_port}/metrics',
                auth=(ch_user, ch_password),
                timeout=10
            )
            if response.status_code == 200:
                metrics_text = response.text
                # –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                for line in metrics_text.split('\n'):
                    if line and not line.startswith('#'):
                        if 'ClickHouseProfileEvents_Query' in line:
                            metrics['total_queries'] = line.split()[-1]
                        elif 'ClickHouseProfileEvents_SelectQuery' in line:
                            metrics['select_queries'] = line.split()[-1]
                        elif 'ClickHouseProfileEvents_InsertQuery' in line:
                            metrics['insert_queries'] = line.split()[-1]
        except Exception as e:
            metrics['http_error'] = str(e)
        
        # SQL –º–µ—Ç—Ä–∏–∫–∏ —á–µ—Ä–µ–∑ clickhouse-connect
        try:
            client = get_client(
                host=ch_host,
                port=int(ch_port),
                user=ch_user,
                password=ch_password
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
            tables_info = client.query("""
                SELECT 
                    database,
                    table,
                    total_rows,
                    total_bytes,
                    engine
                FROM system.tables 
                WHERE database NOT IN ('system', 'information_schema')
                ORDER BY total_bytes DESC
                LIMIT 10
            """)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–∞—Ö
            queries_info = client.query("""
                SELECT 
                    count() as active_queries,
                    max(query_duration_ms) as max_duration_ms
                FROM system.processes
                WHERE query NOT LIKE '%system%'
            """)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–ª–∏–∫–∞—Ö
            replicas_info = client.query("""
                SELECT 
                    database,
                    table,
                    is_leader,
                    is_readonly,
                    absolute_delay
                FROM system.replicas
                WHERE database NOT IN ('system')
            """)
            
            client.close()
            
            metrics['tables'] = tables_info.result_rows
            metrics['queries'] = queries_info.result_rows[0] if queries_info.result_rows else [0, 0]
            metrics['replicas'] = replicas_info.result_rows
            
        except Exception as e:
            metrics['sql_error'] = str(e)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""ü¶ò **ClickHouse –∫–ª–∞—Å—Ç–µ—Ä - –º–µ—Ç—Ä–∏–∫–∏**

üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {metrics.get('total_queries', 'N/A')}
‚Ä¢ SELECT –∑–∞–ø—Ä–æ—Å–æ–≤: {metrics.get('select_queries', 'N/A')}
‚Ä¢ INSERT –∑–∞–ø—Ä–æ—Å–æ–≤: {metrics.get('insert_queries', 'N/A')}

üîç **–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:**
‚Ä¢ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {metrics.get('queries', [0, 0])[0]}
‚Ä¢ –ú–∞–∫—Å. –≤—Ä–µ–º—è: {metrics.get('queries', [0, 0])[1]} ms

üìã **–†–µ–ø–ª–∏–∫–∏:**
‚Ä¢ –í—Å–µ–≥–æ: {len(metrics.get('replicas', []))}
‚Ä¢ –õ–∏–¥–µ—Ä—ã: {len([r for r in metrics.get('replicas', []) if r[2]])}
‚Ä¢ –¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ: {len([r for r in metrics.get('replicas', []) if r[3]])}

‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}
"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context['task_instance'].xcom_push(key='clickhouse_metrics', value=metrics)
        context['task_instance'].xcom_push(key='clickhouse_message', value=message)
        
        return message
        
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ ClickHouse: {str(e)}"
        context['task_instance'].xcom_push(key='clickhouse_error', value=str(e))
        return error_message


def check_dag_failures(**context):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç DAG'–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç—ã.
    """
    from airflow.models import DagRun
    from airflow.utils.session import provide_session
    from sqlalchemy.orm import Session
    
    @provide_session
    def get_failed_dags(session: Session = None):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º DAG'–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞
        two_hours_ago = datetime.now() - timedelta(hours=2)
        
        failed_runs = session.query(DagRun).filter(
            DagRun.state == 'failed',
            DagRun.start_date >= two_hours_ago
        ).all()
        
        return failed_runs
    
    failed_dags = get_failed_dags()
    
    if failed_dags:
        # –ï—Å—Ç—å –æ—à–∏–±–∫–∏ - —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç
        alert_message = f"""üö® **–ê–õ–ï–†–¢: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É–ø–∞–≤—à–∏–µ DAG'–∏!**

‚ùå **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫:** {len(failed_dags)}

üìã **–°–ø–∏—Å–æ–∫ —É–ø–∞–≤—à–∏—Ö DAG'–æ–≤:**
"""
        
        for dag_run in failed_dags[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            duration = "N/A"
            if dag_run.end_date and dag_run.start_date:
                duration = str(dag_run.end_date - dag_run.start_date)
            
            alert_message += f"""‚Ä¢ **{dag_run.dag_id}**
  - –í—Ä–µ–º—è: {dag_run.start_date.strftime('%H:%M:%S')}
  - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}
  - ID –∑–∞–ø—É—Å–∫–∞: {dag_run.run_id}

"""
        
        if len(failed_dags) > 5:
            alert_message += f"‚Ä¢ ... –∏ –µ—â–µ {len(failed_dags) - 5} DAG'–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏\n"
        
        alert_message += f"\n‚è∞ –í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {datetime.now().strftime('%H:%M:%S')}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–ª–µ—Ä—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context['task_instance'].xcom_push(key='failure_alert', value=alert_message)
        context['task_instance'].xcom_push(key='has_failures', value=True)
        
        return alert_message
    else:
        # –û—à–∏–±–æ–∫ –Ω–µ—Ç
        success_message = "‚úÖ –í—Å–µ DAG'–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        context['task_instance'].xcom_push(key='has_failures', value=False)
        return success_message


def send_telegram_notification(**context):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
    if not TELEGRAM_AVAILABLE:
        return "TelegramOperator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–¥–∞—á
    ti = context['task_instance']
    
    dag_message = ti.xcom_pull(key='dag_message', task_ids='get_dag_status_report')
    system_message = ti.xcom_pull(key='system_message', task_ids='get_system_metrics')
    clickhouse_message = ti.xcom_pull(key='clickhouse_message', task_ids='get_clickhouse_metrics')
    has_failures = ti.xcom_pull(key='has_failures', task_ids='check_dag_failures')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if has_failures:
        # –ï—Å—Ç—å –æ—à–∏–±–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç
        failure_alert = ti.xcom_pull(key='failure_alert', task_ids='check_dag_failures')
        final_message = f"{failure_alert}\n\n{dag_message}\n\n{system_message}\n\n{clickhouse_message}"
    else:
        # –û—à–∏–±–æ–∫ –Ω–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç—á–µ—Ç
        final_message = f"{dag_message}\n\n{system_message}\n\n{clickhouse_message}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    ti.xcom_push(key='final_message', value=final_message)
    
    return final_message


# –û—Å–Ω–æ–≤–Ω–æ–π DAG –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
with DAG(
    'telegram_monitoring_prod',
    default_args={
        'owner': 'airflow',
        'depends_on_past': False,
        'start_date': datetime(2025, 8, 1),
        'email_on_failure': False,
        'email_on_retry': False,
        'retries': 2,
        'retry_delay': timedelta(minutes=5),
    },
    description='–ü—Ä–æ–¥–∞–∫—à–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç–∏–Ω–≥ —á–µ—Ä–µ–∑ Telegram',
    schedule=timedelta(minutes=30),  # –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    catchup=False,
    tags=['monitoring', 'telegram', 'production', 'clickhouse'],
) as dag:

    start = EmptyOperator(task_id='start')
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ DAG'–∞–º
    get_dag_status = PythonOperator(
        task_id='get_dag_status_report',
        python_callable=get_dag_status_report,
    )
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    get_system_metrics_task = PythonOperator(
        task_id='get_system_metrics',
        python_callable=get_system_metrics,
    )
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ ClickHouse
    get_clickhouse_metrics_task = PythonOperator(
        task_id='get_clickhouse_metrics',
        python_callable=get_clickhouse_metrics,
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ DAG'–æ–≤
    check_failures = PythonOperator(
        task_id='check_dag_failures',
        python_callable=check_dag_failures,
    )
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    prepare_notification = PythonOperator(
        task_id='prepare_notification',
        python_callable=send_telegram_notification,
    )
    
    end = EmptyOperator(task_id='end')
    
    # Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
    if TELEGRAM_AVAILABLE:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        telegram_notification = TelegramOperator(
            task_id='telegram_notification',
            telegram_conn_id='telegram_default',
            chat_id=os.environ.get('TELEGRAM_CHAT_ID', ''),
            text='{{ task_instance.xcom_pull(key="final_message", task_ids="prepare_notification") }}'
        )
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏
        start >> [get_dag_status, get_system_metrics_task, get_clickhouse_metrics_task] >> check_failures >> prepare_notification >> telegram_notification >> end
    else:
        # –ë–µ–∑ Telegram - –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        start >> [get_dag_status, get_system_metrics_task, get_clickhouse_metrics_task] >> check_failures >> prepare_notification >> end


# DAG –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ
with DAG(
    'telegram_manual_report',
    default_args={
        'owner': 'airflow',
        'depends_on_past': False,
        'start_date': datetime(2025, 8, 1),
        'email_on_failure': False,
        'email_on_retry': False,
        'retries': 1,
        'retry_delay': timedelta(minutes=2),
    },
    description='–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ—Ç—á–µ—Ç–∞ –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É',
    schedule=None,  # –¢–æ–ª—å–∫–æ –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä—É
    catchup=False,
    tags=['monitoring', 'telegram', 'manual', 'report'],
) as dag:

    start = EmptyOperator(task_id='start')
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ DAG'–∞–º
    get_dag_status = PythonOperator(
        task_id='get_dag_status_report',
        python_callable=get_dag_status_report,
    )
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    get_system_metrics_task = PythonOperator(
        task_id='get_system_metrics',
        python_callable=get_system_metrics,
    )
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ ClickHouse
    get_clickhouse_metrics_task = PythonOperator(
        task_id='get_clickhouse_metrics',
        python_callable=get_clickhouse_metrics,
    )
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    prepare_notification = PythonOperator(
        task_id='prepare_notification',
        python_callable=send_telegram_notification,
    )
    
    end = EmptyOperator(task_id='end')
    
    # Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
    if TELEGRAM_AVAILABLE:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        telegram_notification = TelegramOperator(
            task_id='telegram_notification',
            telegram_conn_id='telegram_default',
            chat_id=os.environ.get('TELEGRAM_CHAT_ID', ''),
            text='{{ task_instance.xcom_pull(key="final_message", task_ids="prepare_notification") }}'
        )
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏
        start >> [get_dag_status, get_system_metrics_task, get_clickhouse_metrics_task] >> prepare_notification >> telegram_notification >> end
    else:
        # –ë–µ–∑ Telegram - –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        start >> [get_dag_status, get_system_metrics_task, get_clickhouse_metrics_task] >> prepare_notification >> end
