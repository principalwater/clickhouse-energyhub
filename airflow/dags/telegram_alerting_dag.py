"""
–ü—Ä–æ–¥–∞–∫—à–Ω DAG –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–ª–µ—Ä—Ç–∏–Ω–≥–∞ –≤ Apache Airflow.

–≠—Ç–æ—Ç DAG –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç:
- –°–æ—Å—Ç–æ—è–Ω–∏–µ DAG Run (–ø–∞–¥–µ–Ω–∏—è, –æ—à–∏–±–∫–∏)
- –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (CPU, RAM, Docker)
- –°–æ—Å—Ç–æ—è–Ω–∏–µ ClickHouse –∫–ª–∞—Å—Ç–µ—Ä–∞
- –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç TelegramOperator 4.8.2+ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º API

–ù–ê–°–¢–†–û–ô–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø:
–î–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
- TELEGRAM_BOT_TOKEN: —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç—å —É @BotFather)
- TELEGRAM_CHAT_ID: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

–ü—Ä–∏–º–µ—Ä:
export TELEGRAM_BOT_TOKEN="1234567890:ABCDEFghijklmnopqrstuvwxyz"
export TELEGRAM_CHAT_ID="-1001234567890"
"""

import os
import json
import psutil
import docker
import logging
from datetime import datetime, timedelta
import pytz
from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.operators.empty import EmptyOperator
from airflow.operators.trigger_dagrun import TriggerDagRunOperator
from airflow.api.client.local_client import Client
from airflow.configuration import conf

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def get_moscow_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ (UTC+3)"""
    moscow_tz = pytz.timezone('Europe/Moscow')
    utc_now = datetime.now(pytz.UTC)
    moscow_time = utc_now.astimezone(moscow_tz)
    return moscow_time.strftime('%H:%M:%S')

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ TelegramOperator
try:
    from airflow.providers.telegram.operators.telegram import TelegramOperator
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID:
        TELEGRAM_AVAILABLE = True
        print("‚úÖ TelegramOperator 4.8.2 –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    else:
        TELEGRAM_AVAILABLE = False
        print("‚ùå Telegram –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ù—É–∂–Ω—ã: TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID")
except ImportError:
    TELEGRAM_AVAILABLE = False
    print("‚ùå TelegramOperator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install apache-airflow-providers-telegram>=4.8.2")




def get_dag_status_report(**context):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö DAG.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ SQLAlchemy.
    """
    from datetime import datetime, timedelta
    from sqlalchemy import create_engine, text
    from airflow.models import DagBag
    import os
    
    try:
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ DAG –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö DAG —á–µ—Ä–µ–∑ DagBag
        try:
            dagbag = DagBag()
            total_dags = len(dagbag.dags)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ DAG: {total_dags}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ DAG: {e}")
            total_dags = 0
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        total_success = 0
        total_failed = 0
        total_running = 0
        total_queued = 0
        total_dag_runs = 0  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ DAG Run
        failed_dags = []
        running_dags = []
        queued_dags = []
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Airflow connections
            from airflow.hooks.base import BaseHook
            conn = BaseHook.get_connection('airflow_db')
            connection_string = conn.get_uri()
            print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —á–µ—Ä–µ–∑ Airflow connection: {conn.host}:{conn.port}/{conn.schema}")
        except:
            # Fallback –∫ –ø—Ä—è–º–æ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –∫ PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ Terraform
            db_host = 'postgres'  # –ò–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ PostgreSQL
            db_port = '5432'
            db_user = 'airflow'
            db_password = 'airflow'  # –ë—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            db_name = 'airflow'
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            airflow_pg_password = os.environ.get('AIRFLOW_POSTGRES_PASSWORD')
            if airflow_pg_password:
                db_password = airflow_pg_password
            else:
                # Fallback –∫ –ø–∞—Ä–æ–ª—é –∏–∑ terraform.tfvars
                db_password = 'AirflowPassword123!'
            
            connection_string = f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
            
            # –ú–∞—Å–∫–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            masked_connection = connection_string.replace(db_password, '***')
            print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –Ω–∞–ø—Ä—è–º—É—é: {masked_connection}")
            print(f"üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: host={db_host}, port={db_port}, user={db_user}, db={db_name}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        engine = create_engine(connection_string)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        try:
            with engine.connect() as test_conn:
                test_conn.execute(text("SELECT 1"))
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        yesterday = datetime.now() - timedelta(days=1)
        
        with engine.connect() as conn:
            # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            query = text("""
                SELECT 
                    dag_id,
                    state,
                    COUNT(*) as count
                FROM dag_run 
                WHERE start_date >= :start_date
                GROUP BY dag_id, state
                ORDER BY dag_id, state
            """)
            
            result = conn.execute(query, {'start_date': yesterday})
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ DAG
            dag_stats = {}
            for row in result:
                dag_id = row.dag_id
                state = row.state
                count = row.count
                
                if dag_id not in dag_stats:
                    dag_stats[dag_id] = {}
                
                dag_stats[dag_id][state] = count
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                total_dag_runs += count  # –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É DAG Run
                if state == 'success':
                    total_success += count
                elif state == 'failed':
                    total_failed += count
                elif state == 'running':
                    total_running += count
                elif state == 'queued':
                    total_queued += count
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ DAG –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            for dag_id, states in dag_stats.items():
                if 'failed' in states and states['failed'] > 0:
                    failed_dags.append({
                        'dag_id': dag_id,
                        'count': states['failed']
                    })
                
                if 'running' in states and states['running'] > 0:
                    running_dags.append({
                        'dag_id': dag_id,
                        'count': states['running']
                    })
                
                if 'queued' in states and states['queued'] > 0:
                    queued_dags.append({
                        'dag_id': dag_id,
                        'count': states['queued']
                    })
            
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –ë–î: Success={total_success}, Failed={total_failed}, Running={total_running}, Queued={total_queued}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
            current_time = get_moscow_time()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            dag_status_report = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ DAG –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞**
‚è∞ –í—Ä–µ–º—è: {current_time}

üìà **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ DAG: {total_dags}
‚Ä¢ –í—Å–µ–≥–æ DAG Run: {total_dag_runs}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {total_success} ‚úÖ
‚Ä¢ –£–ø–∞–≤—à–∏—Ö: {total_failed} ‚ùå
‚Ä¢ –í—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è: {total_running} üîÑ
‚Ä¢ –í –æ—á–µ—Ä–µ–¥–∏: {total_queued} ‚è≥

"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ø–∞–≤—à–∏—Ö DAG
            if failed_dags:
                dag_status_report += f"‚ùå **–£–ø–∞–≤—à–∏–µ DAG ({len(failed_dags)}):**\n"
                for dag_info in failed_dags[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    dag_status_report += f"‚Ä¢ `{dag_info['dag_id']}` ({dag_info['count']} —Ä–∞–∑)\n"
                if len(failed_dags) > 5:
                    dag_status_report += f"‚Ä¢ ... –∏ –µ—â–µ {len(failed_dags) - 5}\n"
                dag_status_report += "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è DAG
            if running_dags:
                dag_status_report += f"üîÑ **–í—ã–ø–æ–ª–Ω—è—é—â–∏–µ—Å—è DAG ({len(running_dags)}):**\n"
                for dag_info in running_dags[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    dag_status_report += f"‚Ä¢ `{dag_info['dag_id']}` ({dag_info['count']} —Ä–∞–∑)\n"
                if len(running_dags) > 5:
                    dag_status_report += f"‚Ä¢ ... –∏ –µ—â–µ {len(running_dags) - 5}\n"
                dag_status_report += "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ DAG –≤ –æ—á–µ—Ä–µ–¥–∏
            if queued_dags:
                dag_status_report += f"‚è≥ **DAG –≤ –æ—á–µ—Ä–µ–¥–∏ ({len(queued_dags)}):**\n"
                for dag_info in queued_dags[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    dag_status_report += f"‚Ä¢ `{dag_info['dag_id']}` ({dag_info['count']} —Ä–∞–∑)\n"
                if len(queued_dags) > 3:
                    dag_status_report += f"‚Ä¢ ... –∏ –µ—â–µ {len(queued_dags) - 3}\n"
                dag_status_report += "\n"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context['task_instance'].xcom_push(key='dag_message', value=dag_status_report)
            context['task_instance'].xcom_push(key='dag_stats', value={
                'total_dags': total_dags,
                'total_dag_runs': total_dag_runs,
                'success_count': total_success,
                'failed_count': total_failed,
                'running_count': total_running,
                'queued_count': total_queued,
                'failed_dags': failed_dags,
                'running_dags': running_dags,
                'queued_dags': queued_dags
            })
            
            print("‚úÖ –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ DAG —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
            return dag_status_report
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î: {e}")
        # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        total_success = 0
        total_failed = 0
        total_running = 0
        total_queued = 0
        total_dag_runs = 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
        current_time = get_moscow_time()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        dag_status_report = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ DAG –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞**
‚è∞ –í—Ä–µ–º—è: {current_time}

üìà **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ DAG: {total_dags}
‚Ä¢ –í—Å–µ–≥–æ DAG Run: {total_dag_runs}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {total_success} ‚úÖ
‚Ä¢ –£–ø–∞–≤—à–∏—Ö: {total_failed} ‚ùå
‚Ä¢ –í—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è: {total_running} üîÑ
‚Ä¢ –í –æ—á–µ—Ä–µ–¥–∏: {total_queued} ‚è≥

"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ø–∞–≤—à–∏—Ö DAG
        if failed_dags:
            dag_status_report += f"‚ùå **–£–ø–∞–≤—à–∏–µ DAG ({len(failed_dags)}):**\n"
            for dag_info in failed_dags[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                dag_status_report += f"‚Ä¢ `{dag_info['dag_id']}` ({dag_info['count']} —Ä–∞–∑)\n"
            if len(failed_dags) > 5:
                dag_status_report += f"‚Ä¢ ... –∏ –µ—â–µ {len(failed_dags) - 5}\n"
            dag_status_report += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è DAG
        if running_dags:
            dag_status_report += f"üîÑ **–í—ã–ø–æ–ª–Ω—è—é—â–∏–µ—Å—è DAG ({len(running_dags)}):**\n"
            for dag_info in running_dags[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                dag_status_report += f"‚Ä¢ `{dag_info['dag_id']}` ({dag_info['count']} —Ä–∞–∑)\n"
            if len(running_dags) > 5:
                dag_status_report += f"‚Ä¢ ... –∏ –µ—â–µ {len(running_dags) - 5}\n"
            dag_status_report += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ DAG –≤ –æ—á–µ—Ä–µ–¥–∏
        if queued_dags:
            dag_status_report += f"‚è≥ **DAG –≤ –æ—á–µ—Ä–µ–¥–∏ ({len(queued_dags)}):**\n"
            for dag_info in queued_dags[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                dag_status_report += f"‚Ä¢ `{dag_info['dag_id']}` ({dag_info['count']} —Ä–∞–∑)\n"
            if len(queued_dags) > 3:
                dag_status_report += f"‚Ä¢ ... –∏ –µ—â–µ {len(queued_dags) - 3}\n"
            dag_status_report += "\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context['task_instance'].xcom_push(key='dag_message', value=dag_status_report)
        context['task_instance'].xcom_push(key='dag_stats', value={
            'total_dags': total_dags,
            'success_count': total_success,
            'failed_count': total_failed,
            'running_count': total_running,
            'queued_count': total_queued,
            'failed_dags': failed_dags,
            'running_dags': running_dags,
            'queued_dags': queued_dags
        })
        
        print("‚úÖ –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ DAG —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
        return dag_status_report
        
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ DAG: {str(e)}"
        print(error_message)
        context['task_instance'].xcom_push(key='dag_message', value=error_message)
        return error_message

def get_system_metrics(**context):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (CPU, RAM, Docker).
    """
    try:
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        # Docker –º–µ—Ç—Ä–∏–∫–∏
        docker_metrics = {}
        try:
            client = docker.from_env()
            containers = client.containers.list()
            
            total_cpu = 0
            total_memory = 0
            running_containers = 0
            
            for container in containers:
                try:
                    stats = container.stats(stream=False)
                    # CPU usage (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
                    cpu_delta = stats['cpu_stats']['cpu_usage']['total_usage'] - stats['precpu_stats']['cpu_usage']['total_usage']
                    system_delta = stats['cpu_stats']['system_cpu_usage'] - stats['precpu_stats']['system_cpu_usage']
                    if system_delta > 0:
                        cpu_percent_container = (cpu_delta / system_delta) * 100
                        total_cpu += cpu_percent_container
                    
                    # Memory usage (–≤ MB)
                    memory_usage = stats['memory_stats']['usage'] / (1024 * 1024)
                    total_memory += memory_usage
                    
                    running_containers += 1
                except:
                    continue
            
            docker_metrics = {
                'running_containers': running_containers,
                'avg_cpu_percent': total_cpu / running_containers if running_containers > 0 else 0,
                'total_memory_mb': total_memory,
                'avg_memory_mb': total_memory / running_containers if running_containers > 0 else 0
            }
        except Exception as e:
            docker_metrics = {'error': str(e)}
        
        metrics = {
            'timestamp': datetime.now().isoformat(),
            'system': {
                'cpu_percent': cpu_percent,
                'memory_percent': memory.percent,
                'memory_available_gb': round(memory.available / (1024**3), 2),
                'disk_percent': disk.percent,
                'disk_free_gb': round(disk.free / (1024**3), 2)
            },
            'docker': docker_metrics
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""üñ•Ô∏è **–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏**

üíª **CPU –∏ –ø–∞–º—è—Ç—å:**
‚Ä¢ CPU: {cpu_percent}%
‚Ä¢ RAM: {memory.percent}% ({round(memory.available / (1024**3), 2)} GB —Å–≤–æ–±–æ–¥–Ω–æ)
‚Ä¢ –î–∏—Å–∫: {disk.percent}% ({round(disk.free / (1024**3), 2)} GB —Å–≤–æ–±–æ–¥–Ω–æ)

üê≥ **Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:**
‚Ä¢ –ó–∞–ø—É—â–µ–Ω–æ: {docker_metrics.get('running_containers', 'N/A')}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π CPU: {round(docker_metrics.get('avg_cpu_percent', 0), 1)}%
‚Ä¢ –û–±—â–∞—è –ø–∞–º—è—Ç—å: {round(docker_metrics.get('total_memory_mb', 0), 1)} MB

‚è∞ –í—Ä–µ–º—è: {get_moscow_time()}
"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context['task_instance'].xcom_push(key='system_metrics', value=metrics)
        context['task_instance'].xcom_push(key='system_message', value=message)
        
        return message
        
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {str(e)}"
        context['task_instance'].xcom_push(key='system_error', value=str(e))
        return error_message


def get_clickhouse_metrics(**context):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ ClickHouse –∫–ª–∞—Å—Ç–µ—Ä–∞.
    """
    import requests
    from clickhouse_connect import get_client
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        ch_host = os.environ.get('CLICKHOUSE_HOST', 'clickhouse-01')
        ch_port = os.environ.get('CLICKHOUSE_PORT', '8123')
        ch_user = os.environ.get('CLICKHOUSE_USER', 'default')
        ch_password = os.environ.get('CLICKHOUSE_PASSWORD', '')
        
        metrics = {}
        
        # HTTP API –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        try:
            print(f"üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse: {ch_host}:{ch_port}")
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ ping
            response = requests.get(
                f'http://{ch_host}:{ch_port}/ping',
                auth=(ch_user, ch_password),
                timeout=10
            )
            if response.status_code == 200:
                print("‚úÖ ClickHouse HTTP API –¥–æ—Å—Ç—É–ø–µ–Ω")
                metrics['http_status'] = 'OK'
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ SQL –∑–∞–ø—Ä–æ—Å –∫ HTTP API
                sql_response = requests.get(
                    f'http://{ch_host}:{ch_port}/',
                    params={'query': 'SELECT 1'},
                    auth=(ch_user, ch_password),
                    timeout=10
                )
                if sql_response.status_code == 200:
                    metrics['sql_http_status'] = 'OK'
                else:
                    metrics['sql_http_status'] = f'HTTP {sql_response.status_code}'
            else:
                print(f"‚ùå ClickHouse HTTP API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                metrics['http_error'] = f"HTTP {response.status_code}"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ClickHouse HTTP API: {e}")
            metrics['http_error'] = str(e)
        
        # SQL –º–µ—Ç—Ä–∏–∫–∏ —á–µ—Ä–µ–∑ clickhouse-connect
        try:
            print(f"üîç SQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse: {ch_user}@{ch_host}:{ch_port}")
            client = get_client(
                host=ch_host,
                port=int(ch_port),
                user=ch_user,
                password=ch_password
            )
            print("‚úÖ ClickHouse SQL –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
            tables_info = client.query("""
                SELECT 
                    database,
                    table,
                    total_rows,
                    total_bytes,
                    engine
                FROM system.tables 
                WHERE database NOT IN ('system', 'information_schema')
                ORDER BY total_bytes DESC
                LIMIT 10
            """)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–∞—Ö
            queries_info = client.query("""
                SELECT 
                    count() as active_queries,
                    max(elapsed) as max_duration_sec
                FROM system.processes
                WHERE query NOT LIKE '%system%'
            """)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–ª–∏–∫–∞—Ö
            replicas_info = client.query("""
                SELECT 
                    database,
                    table,
                    is_leader,
                    is_readonly,
                    absolute_delay
                FROM system.replicas
                WHERE database NOT IN ('system')
            """)
            
            client.close()
            
            metrics['tables'] = tables_info.result_rows
            metrics['queries'] = queries_info.result_rows[0] if queries_info.result_rows else [0, 0]
            metrics['replicas'] = replicas_info.result_rows
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ SQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ClickHouse: {e}")
            metrics['sql_error'] = str(e)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""ü¶ò **ClickHouse –∫–ª–∞—Å—Ç–µ—Ä - –º–µ—Ç—Ä–∏–∫–∏**

üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {len(metrics.get('tables', []))}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {metrics.get('queries', [0, 0])[0] if metrics.get('queries') else 0}
‚Ä¢ –ú–∞–∫—Å. –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {round(metrics.get('queries', [0, 0])[1], 2) if metrics.get('queries') and metrics.get('queries')[1] else 0} —Å–µ–∫

üìã **–†–µ–ø–ª–∏–∫–∏:**
‚Ä¢ –í—Å–µ–≥–æ: {len(metrics.get('replicas', []))}
‚Ä¢ –õ–∏–¥–µ—Ä—ã: {len([r for r in metrics.get('replicas', []) if r[2]])}
‚Ä¢ –¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ: {len([r for r in metrics.get('replicas', []) if r[3]])}"""

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        status_info = []
        if 'http_status' in metrics:
            status_info.append(f"HTTP API: {metrics['http_status']}")
        elif 'http_error' in metrics:
            status_info.append(f"HTTP API: ‚ùå {metrics['http_error']}")
        
        if 'sql_error' not in metrics and metrics.get('queries') is not None:
            status_info.append("SQL: ‚úÖ OK")
        elif 'sql_error' in metrics:
            status_info.append(f"SQL: ‚ùå {metrics['sql_error'][:100]}...")

        if status_info:
            message += "\n\nüîó **–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**"
            for info in status_info:
                message += f"\n‚Ä¢ {info}"

        message += f"\n\n‚è∞ –í—Ä–µ–º—è: {get_moscow_time()}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context['task_instance'].xcom_push(key='clickhouse_metrics', value=metrics)
        context['task_instance'].xcom_push(key='clickhouse_message', value=message)
        
        return message
        
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ ClickHouse: {str(e)}"
        context['task_instance'].xcom_push(key='clickhouse_error', value=str(e))
        return error_message


def check_dag_failures(**context):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç DAG'–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ get_dag_status_report.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ, —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ DAG –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏
        ti = context['task_instance']
        dag_stats = ti.xcom_pull(key='dag_stats', task_ids='get_dag_status_report')
        
        if not dag_stats:
            print("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ DAG'–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            context['task_instance'].xcom_push(key='has_failures', value=False)
            return "–î–∞–Ω–Ω—ã–µ –æ DAG'–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        failed_count = dag_stats.get('failed_count', 0)
        failed_dags = dag_stats.get('failed_dags', [])
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —É–ø–∞–≤—à–∏—Ö DAG: {failed_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
        has_failures = failed_count > 0
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        context['task_instance'].xcom_push(key='has_failures', value=has_failures)
        
        if has_failures:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç
            alert_message = f"""
üö® **–ê–õ–ï–†–¢: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É–ø–∞–≤—à–∏–µ DAG**

‚ùå **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–∞–≤—à–∏—Ö DAG:** {failed_count}

üìã **–°–ø–∏—Å–æ–∫ —É–ø–∞–≤—à–∏—Ö DAG:**
"""
            
            for dag_info in failed_dags[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                alert_message += f"‚Ä¢ `{dag_info['dag_id']}` ({dag_info['count']} —Ä–∞–∑)\n"
            
            if len(failed_dags) > 10:
                alert_message += f"‚Ä¢ ... –∏ –µ—â–µ {len(failed_dags) - 10}\n"
            
            alert_message += f"""
‚è∞ –í—Ä–µ–º—è: {get_moscow_time()}

üîß **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —É–ø–∞–≤—à–∏—Ö DAG –≤ Airflow UI
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
"""
            
            context['task_instance'].xcom_push(key='failure_alert', value=alert_message)
            print("üö® –ê–ª–µ—Ä—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
            return alert_message
        else:
            # –í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ
            success_message = f"‚úÖ –í—Å–µ DAG —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –í—Ä–µ–º—è: {get_moscow_time()}"
            context['task_instance'].xcom_push(key='failure_alert', value=success_message)
            print("‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            return success_message
            
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ DAG: {str(e)}"
        print(error_message)
        context['task_instance'].xcom_push(key='has_failures', value=False)
        context['task_instance'].xcom_push(key='failure_alert', value=error_message)
        return error_message


def send_telegram_notification(**context):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
    if not TELEGRAM_AVAILABLE:
        return "TelegramOperator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–¥–∞—á
    ti = context['task_instance']
    
    dag_message = ti.xcom_pull(key='dag_message', task_ids='get_dag_status_report')
    system_message = ti.xcom_pull(key='system_message', task_ids='get_system_metrics')
    clickhouse_message = ti.xcom_pull(key='clickhouse_message', task_ids='get_clickhouse_metrics')
    has_failures = ti.xcom_pull(key='has_failures', task_ids='check_dag_failures')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if has_failures:
        # –ï—Å—Ç—å –æ—à–∏–±–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç
        failure_alert = ti.xcom_pull(key='failure_alert', task_ids='check_dag_failures')
        final_message = f"{failure_alert}\n\n{dag_message}\n\n{system_message}\n\n{clickhouse_message}"
    else:
        # –û—à–∏–±–æ–∫ –Ω–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç—á–µ—Ç
        final_message = f"{dag_message}\n\n{system_message}\n\n{clickhouse_message}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    ti.xcom_push(key='final_message', value=final_message)
    
    return final_message


# –û—Å–Ω–æ–≤–Ω–æ–π DAG –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
with DAG(
    'telegram_monitoring_prod',
    default_args={
        'owner': 'airflow',
        'depends_on_past': False,
        'start_date': datetime(2025, 8, 1),
        'email_on_failure': False,
        'email_on_retry': False,
        'retries': 2,
        'retry_delay': timedelta(minutes=5),
    },
    description='–ü—Ä–æ–¥–∞–∫—à–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç–∏–Ω–≥ —á–µ—Ä–µ–∑ Telegram (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)',
    schedule='*/30 * * * *',  # –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç (–≤ 00 –∏ 30 –º–∏–Ω—É—Ç –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞)
    catchup=False,
    tags=['monitoring', 'telegram', 'production', 'clickhouse'],
) as dag:

    start = EmptyOperator(task_id='start')
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ DAG
    get_dag_status = PythonOperator(
        task_id='get_dag_status_report',
        python_callable=get_dag_status_report,
    )
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    get_system_metrics_task = PythonOperator(
        task_id='get_system_metrics',
        python_callable=get_system_metrics,
    )
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ ClickHouse
    get_clickhouse_metrics_task = PythonOperator(
        task_id='get_clickhouse_metrics',
        python_callable=get_clickhouse_metrics,
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ DAG
    check_failures = PythonOperator(
        task_id='check_dag_failures',
        python_callable=check_dag_failures,
    )
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    prepare_notification = PythonOperator(
        task_id='prepare_notification',
        python_callable=send_telegram_notification,
    )
    
    end = EmptyOperator(task_id='end')
    
    # Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
    if TELEGRAM_AVAILABLE:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        telegram_notification = TelegramOperator(
            task_id='telegram_notification',
            token=TELEGRAM_BOT_TOKEN,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
            chat_id=TELEGRAM_CHAT_ID,
            text='{{ task_instance.xcom_pull(key="final_message", task_ids="prepare_notification") }}'
        )
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏
        start >> [get_dag_status, get_system_metrics_task, get_clickhouse_metrics_task] >> check_failures >> prepare_notification >> telegram_notification >> end
    else:
        # –ë–µ–∑ Telegram - –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        start >> [get_dag_status, get_system_metrics_task, get_clickhouse_metrics_task] >> check_failures >> prepare_notification >> end


# DAG –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ
with DAG(
    'telegram_manual_report',
    default_args={
        'owner': 'airflow',
        'depends_on_past': False,
        'start_date': datetime(2025, 8, 1),
        'email_on_failure': False,
        'email_on_retry': False,
        'retries': 1,
        'retry_delay': timedelta(minutes=2),
    },
    description='–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ—Ç—á–µ—Ç–∞ –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É',
    schedule=None,  # –¢–æ–ª—å–∫–æ –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä—É
    catchup=False,
    tags=['monitoring', 'telegram', 'manual', 'report'],
) as dag:

    start = EmptyOperator(task_id='start')
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ DAG
    get_dag_status = PythonOperator(
        task_id='get_dag_status_report',
        python_callable=get_dag_status_report,
    )
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    get_system_metrics_task = PythonOperator(
        task_id='get_system_metrics',
        python_callable=get_system_metrics,
    )
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ ClickHouse
    get_clickhouse_metrics_task = PythonOperator(
        task_id='get_clickhouse_metrics',
        python_callable=get_clickhouse_metrics,
    )
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    prepare_notification = PythonOperator(
        task_id='prepare_notification',
        python_callable=send_telegram_notification,
    )
    
    end = EmptyOperator(task_id='end')
    
    # Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
    if TELEGRAM_AVAILABLE:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        telegram_notification = TelegramOperator(
            task_id='telegram_notification',
            token=TELEGRAM_BOT_TOKEN,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
            chat_id=TELEGRAM_CHAT_ID,
            text='{{ task_instance.xcom_pull(key="final_message", task_ids="prepare_notification") }}'
        )
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏
        start >> [get_dag_status, get_system_metrics_task, get_clickhouse_metrics_task] >> prepare_notification >> telegram_notification >> end
    else:
        # –ë–µ–∑ Telegram - –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        start >> [get_dag_status, get_system_metrics_task, get_clickhouse_metrics_task] >> prepare_notification >> end
