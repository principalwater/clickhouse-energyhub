name: Terraform & Python Lint CI

on:
  workflow_dispatch: {}           # Manual trigger from any branch for testing.
  pull_request:
    branches:
      - master                    # Automatic check on PR creation targeting master.
  push:
    branches:
      - master                    # Automatic check after merge to master.

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      # ClickHouse Cluster Secrets
      SUPER_USER_PASSWORD: ${{ secrets.SUPER_USER_PASSWORD }}
      BI_USER_PASSWORD: ${{ secrets.BI_USER_PASSWORD }}
      MINIO_ROOT_USER: ${{ secrets.MINIO_ROOT_USER }}
      MINIO_ROOT_PASSWORD: ${{ secrets.MINIO_ROOT_PASSWORD }}
      REMOTE_SSH_USER: ${{ secrets.REMOTE_SSH_USER }}
      
      # PostgreSQL Secrets (централизованная БД)
      PG_PASSWORD: ${{ secrets.PG_PASSWORD }}
      SA_PASSWORD: ${{ secrets.SA_PASSWORD }}
      SUPERSET_SECRET_KEY: ${{ secrets.SUPERSET_SECRET_KEY }}
      
      # Apache Airflow 3.0.4 Secrets (новые)
      AIRFLOW_POSTGRES_PASSWORD: ${{ secrets.AIRFLOW_POSTGRES_PASSWORD }}
      AIRFLOW_ADMIN_PASSWORD: ${{ secrets.AIRFLOW_ADMIN_PASSWORD }}
      AIRFLOW_FERNET_KEY: ${{ secrets.AIRFLOW_FERNET_KEY }}
      AIRFLOW_WEBSERVER_SECRET_KEY: ${{ secrets.AIRFLOW_WEBSERVER_SECRET_KEY }}
      
      # Kafka Secrets
      KAFKA_ADMIN_PASSWORD: ${{ secrets.KAFKA_ADMIN_PASSWORD }}
      KAFKA_SSL_KEYSTORE_PASSWORD: ${{ secrets.KAFKA_SSL_KEYSTORE_PASSWORD }}
      
      # Set storage_type for CI context
      storage_type: local_storage
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.7.5'

      - name: Load sensitive variables from variables.tf
        id: load-vars
        run: |
           set +e
           VARS=""
           if [ -f "infra/terraform/variables.tf" ]; then
             sensitive_no_default=()
             all_no_default=()
             while read -r var; do
               sensitive_no_default+=("$var")
             done < <(awk '
               BEGIN { var=""; sensitive=0; has_default=0; }
               /variable / { if (var && sensitive && !has_default) print var; var=$2; sensitive=0; has_default=0; }
               /sensitive *= *true/ { sensitive=1; }
               /default *=/ { has_default=1; }
               END { if (var && sensitive && !has_default) print var; }
             ' "infra/terraform/variables.tf" | tr -d '"{}')
             while read -r var; do
               all_no_default+=("$var")
             done < <(awk '
               BEGIN { var=""; has_default=0; }
               /variable / { if (var && !has_default) print var; var=$2; has_default=0; }
               /default *=/ { has_default=1; }
               END { if (var && !has_default) print var; }
             ' "infra/terraform/variables.tf" | tr -d '"{}')
             combined=()
             declare -A seen=()
             for v in "${sensitive_no_default[@]}" "${all_no_default[@]}"; do
               if [ -z "${seen[$v]}" ]; then
                 combined+=("$v")
                 seen[$v]=1
               fi
             done
             for var in "${combined[@]}"; do
               env_name=$(env | grep -i "^${var}=" | cut -d= -f1 | head -n1 || true)
               if [ -z "$env_name" ]; then
                 env_name=$(env | grep -i "^$(echo "$var" | tr '[:lower:]' '[:upper:]')=" | cut -d= -f1 | head -n1 || true)
               fi
               if [ -n "$env_name" ]; then
                 val=$(printenv "$env_name" || true)
                 VARS="$VARS -var=$var=\"$val\""
               fi
             done
           fi
           echo "[LOAD VARS] Loaded variables: $VARS"
           echo "vars=$VARS" >> $GITHUB_OUTPUT

      - name: Terraform Init
        run: terraform init -backend=false
        working-directory: infra/terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: infra/terraform

      - name: Terraform Format Check
        run: terraform fmt -check
        working-directory: infra/terraform

      - name: Terraform Plan
        run: |
          # Override paths and set storage_type for CI context
          terraform plan -out=tfplan ${{ steps.load-vars.outputs.vars }} \
            -var="clickhouse_base_path=../../volumes/clickhouse" \
            -var="bi_postgres_data_path=../../volumes/postgres/data" \
            -var="storage_type=local_storage"
          terraform show -no-color tfplan > plan.txt
        working-directory: infra/terraform

      - name: Upload Terraform plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: infra/terraform/plan.txt

  python-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Find and check Python scripts syntax
        run: |
          # Find all .py files not ignored by .gitignore.
          git ls-files '*.py' | while read -r file; do
            echo "Checking syntax: $file"
            python -m py_compile "$file"
          done

      - name: Find and check shell script syntax
        run: |
          # Find all shell scripts (.sh) not ignored by .gitignore and validate syntax with 'bash -n'.
          # Fail the job if any script has syntax errors to prevent issues during CI.
          git ls-files '*.sh' | while read -r file; do
            echo "Checking syntax: $file"
            bash -n "$file"
          done

  dbt-check:
    runs-on: ubuntu-latest
    needs: terraform
    env:
      DBT_PROFILES_DIR: ./dbt/profiles
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dbt-clickhouse
        run: |
          pip install 'dbt-core>=1.10.0'
          pip install 'dbt-clickhouse>=1.9.0'
          
      - name: Check dbt version
        run: |
          cd dbt
          dbt --version
          
      - name: Create dbt project structure
        run: |
          cd dbt
          chmod +x ../.github/workflows/dbt-ci-setup.sh
          ../.github/workflows/dbt-ci-setup.sh

      - name: Check dbt project structure
        run: |
          cd dbt
          echo "Checking dbt project structure..."
          if [ -f "dbt_project.yml" ]; then
            echo "✓ dbt_project.yml found"
          else
            echo "✗ dbt_project.yml not found"
            exit 1
          fi
          
          if [ -d "models" ]; then
            echo "✓ models directory found"
            echo "Checking model layers..."
            if [ -d "models/raw" ]; then
              echo "✓ RAW layer found"
            else
              echo "✗ RAW layer not found"
              exit 1
            fi
            if [ -d "models/ods" ]; then
              echo "✓ ODS layer found"
            else
              echo "✗ ODS layer not found"
              exit 1
            fi
            if [ -d "models/dds" ]; then
              echo "✓ DDS layer found"
            else
              echo "✗ DDS layer not found"
              exit 1
            fi
            if [ -d "models/cdm" ]; then
              echo "✓ CDM layer found"
            else
              echo "✗ CDM layer not found"
              exit 1
            fi
          else
            echo "✗ models directory not found"
            exit 1
          fi
          
          if [ -d "macros" ]; then
            echo "✓ macros directory found"
          else
            echo "✗ macros directory not found"
            exit 1
          fi
          
          if [ -d "tests" ]; then
            echo "✓ tests directory found"
          else
            echo "✗ tests directory not found"
            exit 1
          fi

      - name: Note about offline dbt checks
        run: |
          echo "Running dbt checks in offline mode (no database connection)"
          echo "This will validate syntax, structure, and compile models without running them"
          
      - name: Validate dbt project
        run: |
          cd dbt
          echo "Validating dbt project structure..."
          dbt parse --profiles-dir profiles --no-version-check

      - name: Check dbt models syntax
        run: |
          cd dbt
          echo "Checking dbt models syntax..."
          dbt parse --profiles-dir profiles --no-version-check
          
      - name: Validate dbt model layers
        run: |
          cd dbt
          echo "Validating dbt model layers..."
          
          # Проверка RAW слоя
          echo "Validating RAW layer..."
          dbt list --select tag:raw --profiles-dir profiles --no-version-check
          
          # Проверка ODS слоя
          echo "Validating ODS layer..."
          dbt list --select tag:ods --profiles-dir profiles --no-version-check
          
          # Проверка DDS слоя
          echo "Validating DDS layer..."
          dbt list --select tag:dds --profiles-dir profiles --no-version-check
          
          # Проверка CDM слоя
          echo "Validating CDM layer..."
          dbt list --select tag:cdm --profiles-dir profiles --no-version-check
          
      - name: Note about dbt tests
        run: |
          cd dbt
          echo "Note: dbt tests require database connection and are not run in CI"
          echo "Tests should be run locally or in deployment environment"
